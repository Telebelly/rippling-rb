=begin
#Rippling Platform API

#Documentation for the Rippling Platform API.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'date'
require 'time'

module OpenapiClient
  # 
  class Compensation
    # Identifier field
    attr_accessor :id

    # Record creation date
    attr_accessor :created_at

    # Record update date
    attr_accessor :updated_at

    # The worker's ID.
    attr_accessor :worker_id

    # The worker's details.  Expandable field
    attr_accessor :worker

    # The worker's annual compensation. This calculation assumes 40-hour work weeks for workers with an hourly wage.
    attr_accessor :annual_compensation

    # The worker's annual salary equivalent, for insurance purposes. It will be equal to the worker's annual compensation, except for owners that are receiving no cashcompensation.
    attr_accessor :annual_salary_equivalent

    # The worker's hourly wage. This calculation assumes 40-hour work weeks for workers with fixed compensation.
    attr_accessor :hourly_wage

    # The worker's monthly compensation. This calculation assumes 40-hour work weeks for workers with an hourly wage.
    attr_accessor :monthly_compensation

    # The worker's on-target commission.
    attr_accessor :on_target_commission

    # The worker's hourly wage. This calculation assumes 40-hour work weeks for workers with fixed compensation.
    attr_accessor :relocation_reimbursement

    # The worker's signing bonus.
    attr_accessor :signing_bonus

    # The worker's target annual bonus amount.
    attr_accessor :target_annual_bonus

    # The worker's weekly compensation. This calculation assumes 40-hour work weeks for workers with an hourly wage.
    attr_accessor :weekly_compensation

    # The worker's target annual bonus as a percent of annual compensation.
    attr_accessor :target_annual_bonus_percent

    # The worker's bonus schedule.
    attr_accessor :bonus_schedule

    # The payment type for an worker's compensation.
    attr_accessor :payment_type

    # The payment terms for an worker's compensation.
    attr_accessor :payment_terms

    # Salary effective date
    attr_accessor :salary_effective_date

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'created_at' => :'created_at',
        :'updated_at' => :'updated_at',
        :'worker_id' => :'worker_id',
        :'worker' => :'worker',
        :'annual_compensation' => :'annual_compensation',
        :'annual_salary_equivalent' => :'annual_salary_equivalent',
        :'hourly_wage' => :'hourly_wage',
        :'monthly_compensation' => :'monthly_compensation',
        :'on_target_commission' => :'on_target_commission',
        :'relocation_reimbursement' => :'relocation_reimbursement',
        :'signing_bonus' => :'signing_bonus',
        :'target_annual_bonus' => :'target_annual_bonus',
        :'weekly_compensation' => :'weekly_compensation',
        :'target_annual_bonus_percent' => :'target_annual_bonus_percent',
        :'bonus_schedule' => :'bonus_schedule',
        :'payment_type' => :'payment_type',
        :'payment_terms' => :'payment_terms',
        :'salary_effective_date' => :'salary_effective_date'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'created_at' => :'String',
        :'updated_at' => :'String',
        :'worker_id' => :'String',
        :'worker' => :'Worker',
        :'annual_compensation' => :'Currency',
        :'annual_salary_equivalent' => :'Currency',
        :'hourly_wage' => :'Currency',
        :'monthly_compensation' => :'Currency',
        :'on_target_commission' => :'Currency',
        :'relocation_reimbursement' => :'Currency',
        :'signing_bonus' => :'Currency',
        :'target_annual_bonus' => :'Currency',
        :'weekly_compensation' => :'Currency',
        :'target_annual_bonus_percent' => :'Float',
        :'bonus_schedule' => :'String',
        :'payment_type' => :'String',
        :'payment_terms' => :'String',
        :'salary_effective_date' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::Compensation` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::Compensation`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      else
        self.created_at = nil
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      else
        self.updated_at = nil
      end

      if attributes.key?(:'worker_id')
        self.worker_id = attributes[:'worker_id']
      end

      if attributes.key?(:'worker')
        self.worker = attributes[:'worker']
      end

      if attributes.key?(:'annual_compensation')
        self.annual_compensation = attributes[:'annual_compensation']
      end

      if attributes.key?(:'annual_salary_equivalent')
        self.annual_salary_equivalent = attributes[:'annual_salary_equivalent']
      end

      if attributes.key?(:'hourly_wage')
        self.hourly_wage = attributes[:'hourly_wage']
      end

      if attributes.key?(:'monthly_compensation')
        self.monthly_compensation = attributes[:'monthly_compensation']
      end

      if attributes.key?(:'on_target_commission')
        self.on_target_commission = attributes[:'on_target_commission']
      end

      if attributes.key?(:'relocation_reimbursement')
        self.relocation_reimbursement = attributes[:'relocation_reimbursement']
      end

      if attributes.key?(:'signing_bonus')
        self.signing_bonus = attributes[:'signing_bonus']
      end

      if attributes.key?(:'target_annual_bonus')
        self.target_annual_bonus = attributes[:'target_annual_bonus']
      end

      if attributes.key?(:'weekly_compensation')
        self.weekly_compensation = attributes[:'weekly_compensation']
      end

      if attributes.key?(:'target_annual_bonus_percent')
        self.target_annual_bonus_percent = attributes[:'target_annual_bonus_percent']
      end

      if attributes.key?(:'bonus_schedule')
        self.bonus_schedule = attributes[:'bonus_schedule']
      end

      if attributes.key?(:'payment_type')
        self.payment_type = attributes[:'payment_type']
      end

      if attributes.key?(:'payment_terms')
        self.payment_terms = attributes[:'payment_terms']
      end

      if attributes.key?(:'salary_effective_date')
        self.salary_effective_date = attributes[:'salary_effective_date']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @id.nil?
      return false if @created_at.nil?
      return false if @updated_at.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.nil?
        fail ArgumentError, 'id cannot be nil'
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] created_at Value to be assigned
    def created_at=(created_at)
      if created_at.nil?
        fail ArgumentError, 'created_at cannot be nil'
      end

      @created_at = created_at
    end

    # Custom attribute writer method with validation
    # @param [Object] updated_at Value to be assigned
    def updated_at=(updated_at)
      if updated_at.nil?
        fail ArgumentError, 'updated_at cannot be nil'
      end

      @updated_at = updated_at
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          worker_id == o.worker_id &&
          worker == o.worker &&
          annual_compensation == o.annual_compensation &&
          annual_salary_equivalent == o.annual_salary_equivalent &&
          hourly_wage == o.hourly_wage &&
          monthly_compensation == o.monthly_compensation &&
          on_target_commission == o.on_target_commission &&
          relocation_reimbursement == o.relocation_reimbursement &&
          signing_bonus == o.signing_bonus &&
          target_annual_bonus == o.target_annual_bonus &&
          weekly_compensation == o.weekly_compensation &&
          target_annual_bonus_percent == o.target_annual_bonus_percent &&
          bonus_schedule == o.bonus_schedule &&
          payment_type == o.payment_type &&
          payment_terms == o.payment_terms &&
          salary_effective_date == o.salary_effective_date
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, created_at, updated_at, worker_id, worker, annual_compensation, annual_salary_equivalent, hourly_wage, monthly_compensation, on_target_commission, relocation_reimbursement, signing_bonus, target_annual_bonus, weekly_compensation, target_annual_bonus_percent, bonus_schedule, payment_type, payment_terms, salary_effective_date].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
