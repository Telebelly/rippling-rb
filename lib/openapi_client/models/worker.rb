=begin
#Rippling Platform API

#Documentation for the Rippling Platform API.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'date'
require 'time'

module OpenapiClient
  # 
  class Worker
    # Identifier field
    attr_accessor :id

    # Record creation date
    attr_accessor :created_at

    # Record update date
    attr_accessor :updated_at

    # The worker's associated user.
    attr_accessor :user_id

    # The worker's associated user.  Expandable field
    attr_accessor :user

    # The worker's manager.
    attr_accessor :manager_id

    # The worker's manager.  Expandable field
    attr_accessor :manager

    # The worker's associated legal entity.
    attr_accessor :legal_entity_id

    # The worker's associated legal entity.  Expandable field
    attr_accessor :legal_entity

    # The worker's country.
    attr_accessor :country

    # The start date of the worker.
    attr_accessor :start_date

    # The end date of the worker.
    attr_accessor :end_date

    # The worker's number within the organization.
    attr_accessor :number

    # The worker's associated work email address.
    attr_accessor :work_email

    # The worker's associated personal email address.
    attr_accessor :personal_email

    # The worker's status within the organization.
    attr_accessor :status

    # The location that the worker is mapped to for tax purposes. In the case that a worker is remote, the location's type is remote.
    attr_accessor :location

    # The worker's employment type.
    attr_accessor :employment_type_id

    # The worker's employment type.  Expandable field
    attr_accessor :employment_type

    # The gender of the worker, if specified.
    attr_accessor :gender

    # The worker's date of birth.
    attr_accessor :date_of_birth

    # The identified race of the worker, if specified.
    attr_accessor :race

    # The identified ethnicity of the worker, if specified.
    attr_accessor :ethnicity

    # The countries that the worker has citizenship in.
    attr_accessor :citizenship

    # The compensation package for the worker.
    attr_accessor :compensation_id

    # The compensation package for the worker.  Expandable field
    attr_accessor :compensation

    # The worker's overtime exemption status.
    attr_accessor :overtime_exemption

    # The worker's assigned department.
    attr_accessor :department_id

    # The worker's assigned department.  Expandable field
    attr_accessor :department

    # The worker's assigned teams.
    attr_accessor :teams_id

    # The worker's assigned teams.  Expandable field
    attr_accessor :teams

    # The worker's title.
    attr_accessor :title

    # The level of the worker.
    attr_accessor :level_id

    # The level of the worker.  Expandable field
    attr_accessor :level

    # The details of the worker's termination, if applicable.
    attr_accessor :termination_details

    # Custom fields for the worker  Expandable field
    attr_accessor :custom_fields

    # Country level fields for the worker.
    attr_accessor :country_fields

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'created_at' => :'created_at',
        :'updated_at' => :'updated_at',
        :'user_id' => :'user_id',
        :'user' => :'user',
        :'manager_id' => :'manager_id',
        :'manager' => :'manager',
        :'legal_entity_id' => :'legal_entity_id',
        :'legal_entity' => :'legal_entity',
        :'country' => :'country',
        :'start_date' => :'start_date',
        :'end_date' => :'end_date',
        :'number' => :'number',
        :'work_email' => :'work_email',
        :'personal_email' => :'personal_email',
        :'status' => :'status',
        :'location' => :'location',
        :'employment_type_id' => :'employment_type_id',
        :'employment_type' => :'employment_type',
        :'gender' => :'gender',
        :'date_of_birth' => :'date_of_birth',
        :'race' => :'race',
        :'ethnicity' => :'ethnicity',
        :'citizenship' => :'citizenship',
        :'compensation_id' => :'compensation_id',
        :'compensation' => :'compensation',
        :'overtime_exemption' => :'overtime_exemption',
        :'department_id' => :'department_id',
        :'department' => :'department',
        :'teams_id' => :'teams_id',
        :'teams' => :'teams',
        :'title' => :'title',
        :'level_id' => :'level_id',
        :'level' => :'level',
        :'termination_details' => :'termination_details',
        :'custom_fields' => :'custom_fields',
        :'country_fields' => :'country_fields'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'created_at' => :'String',
        :'updated_at' => :'String',
        :'user_id' => :'String',
        :'user' => :'User',
        :'manager_id' => :'String',
        :'manager' => :'Worker',
        :'legal_entity_id' => :'String',
        :'legal_entity' => :'LegalEntity',
        :'country' => :'String',
        :'start_date' => :'String',
        :'end_date' => :'String',
        :'number' => :'Integer',
        :'work_email' => :'String',
        :'personal_email' => :'String',
        :'status' => :'String',
        :'location' => :'WorkerLocation',
        :'employment_type_id' => :'String',
        :'employment_type' => :'CompanyEmploymentType',
        :'gender' => :'String',
        :'date_of_birth' => :'String',
        :'race' => :'String',
        :'ethnicity' => :'String',
        :'citizenship' => :'String',
        :'compensation_id' => :'String',
        :'compensation' => :'Compensation',
        :'overtime_exemption' => :'String',
        :'department_id' => :'String',
        :'department' => :'Department',
        :'teams_id' => :'Array<String>',
        :'teams' => :'Array<Team>',
        :'title' => :'String',
        :'level_id' => :'String',
        :'level' => :'Level',
        :'termination_details' => :'TerminationDetails',
        :'custom_fields' => :'Array<Hash<String, Object>>',
        :'country_fields' => :'CountryFields'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::Worker` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::Worker`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      else
        self.created_at = nil
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      else
        self.updated_at = nil
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'user')
        self.user = attributes[:'user']
      end

      if attributes.key?(:'manager_id')
        self.manager_id = attributes[:'manager_id']
      end

      if attributes.key?(:'manager')
        self.manager = attributes[:'manager']
      end

      if attributes.key?(:'legal_entity_id')
        self.legal_entity_id = attributes[:'legal_entity_id']
      end

      if attributes.key?(:'legal_entity')
        self.legal_entity = attributes[:'legal_entity']
      end

      if attributes.key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.key?(:'end_date')
        self.end_date = attributes[:'end_date']
      end

      if attributes.key?(:'number')
        self.number = attributes[:'number']
      end

      if attributes.key?(:'work_email')
        self.work_email = attributes[:'work_email']
      end

      if attributes.key?(:'personal_email')
        self.personal_email = attributes[:'personal_email']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'location')
        self.location = attributes[:'location']
      end

      if attributes.key?(:'employment_type_id')
        self.employment_type_id = attributes[:'employment_type_id']
      end

      if attributes.key?(:'employment_type')
        self.employment_type = attributes[:'employment_type']
      end

      if attributes.key?(:'gender')
        self.gender = attributes[:'gender']
      end

      if attributes.key?(:'date_of_birth')
        self.date_of_birth = attributes[:'date_of_birth']
      end

      if attributes.key?(:'race')
        self.race = attributes[:'race']
      end

      if attributes.key?(:'ethnicity')
        self.ethnicity = attributes[:'ethnicity']
      end

      if attributes.key?(:'citizenship')
        self.citizenship = attributes[:'citizenship']
      end

      if attributes.key?(:'compensation_id')
        self.compensation_id = attributes[:'compensation_id']
      end

      if attributes.key?(:'compensation')
        self.compensation = attributes[:'compensation']
      end

      if attributes.key?(:'overtime_exemption')
        self.overtime_exemption = attributes[:'overtime_exemption']
      end

      if attributes.key?(:'department_id')
        self.department_id = attributes[:'department_id']
      end

      if attributes.key?(:'department')
        self.department = attributes[:'department']
      end

      if attributes.key?(:'teams_id')
        if (value = attributes[:'teams_id']).is_a?(Array)
          self.teams_id = value
        end
      end

      if attributes.key?(:'teams')
        if (value = attributes[:'teams']).is_a?(Array)
          self.teams = value
        end
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'level_id')
        self.level_id = attributes[:'level_id']
      end

      if attributes.key?(:'level')
        self.level = attributes[:'level']
      end

      if attributes.key?(:'termination_details')
        self.termination_details = attributes[:'termination_details']
      end

      if attributes.key?(:'custom_fields')
        if (value = attributes[:'custom_fields']).is_a?(Array)
          self.custom_fields = value
        end
      end

      if attributes.key?(:'country_fields')
        self.country_fields = attributes[:'country_fields']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @id.nil?
      return false if @created_at.nil?
      return false if @updated_at.nil?
      country_validator = EnumAttributeValidator.new('String', ["AF", "AX", "AL", "DZ", "AS", "AD", "AO", "AI", "AQ", "AG", "AR", "AM", "AW", "AU", "AT", "AZ", "BS", "BH", "BD", "BB", "BY", "BE", "BZ", "BJ", "BM", "BT", "BO", "BQ", "BA", "BW", "BV", "BR", "IO", "BN", "BG", "BF", "BI", "CV", "KH", "CM", "CA", "KY", "CF", "TD", "CL", "CN", "CX", "CC", "CO", "KM", "CG", "CD", "CK", "CR", "CI", "HR", "CW", "CY", "CZ", "DK", "DJ", "DM", "DO", "EC", "EG", "SV", "GQ", "ER", "EE", "SZ", "ET", "FK", "FO", "FJ", "FI", "FR", "GF", "PF", "TF", "GA", "GM", "GE", "DE", "GH", "GI", "GR", "GL", "GD", "GP", "GU", "GT", "GG", "GN", "GW", "GY", "HT", "HM", "VA", "HN", "HK", "HU", "IS", "IN", "ID", "IQ", "IE", "IM", "IL", "IT", "JM", "JP", "JE", "JO", "KZ", "KE", "KI", "KR", "XK", "KW", "KG", "LA", "LV", "LB", "LS", "LR", "LY", "LI", "LT", "LU", "MO", "MG", "MW", "MY", "MV", "ML", "MT", "MH", "MQ", "MR", "MU", "YT", "MX", "FM", "MD", "MC", "MN", "ME", "MS", "MA", "MZ", "MM", "NA", "NR", "NP", "NL", "AN", "NC", "NZ", "NI", "NE", "NG", "NU", "NF", "MK", "MP", "NO", "OM", "PK", "PW", "PS", "PA", "PG", "PY", "PE", "PH", "PN", "PL", "PT", "PR", "QA", "RO", "RU", "RW", "RE", "BL", "SH", "KN", "LC", "MF", "PM", "VC", "WS", "SM", "ST", "SA", "SN", "RS", "SC", "SL", "SG", "SX", "SK", "SI", "SB", "SO", "ZA", "GS", "SS", "ES", "LK", "SD", "SR", "SJ", "SE", "CH", "TW", "TJ", "TZ", "TH", "TL", "TG", "TK", "TO", "TT", "TN", "TR", "TM", "TC", "TV", "UG", "UA", "AE", "GB", "US", "UM", "UY", "UZ", "VU", "VE", "VN", "VG", "VI", "WF", "EH", "YE", "ZM", "ZW"])
      return false unless country_validator.valid?(@country)
      status_validator = EnumAttributeValidator.new('String', ["INIT", "HIRED", "ACCEPTED", "ACTIVE", "TERMINATED"])
      return false unless status_validator.valid?(@status)
      gender_validator = EnumAttributeValidator.new('String', ["MALE", "FEMALE", "NONBINARY", "UNDETERMINED", "DIVERSE", "DOES_NOT_APPLY", "PREFER_NOT_TO_SAY"])
      return false unless gender_validator.valid?(@gender)
      race_validator = EnumAttributeValidator.new('String', ["BLACK", "BROWN", "CHINESE", "EURASIAN", "INDIAN", "INDIGENOUS", "WHITE", "YELLOW", "NOT_INFORMED", "OTHER"])
      return false unless race_validator.valid?(@race)
      ethnicity_validator = EnumAttributeValidator.new('String', ["HISPANIC_OR_LATINO", "WHITE", "BLACK_OR_AFRICAN_AMERICAN", "NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER", "ASIAN", "AMERICAN_INDIAN_OR_ALASKA_NATIVE", "TWO_OR_MORE_RACES", "DECLINE_TO_SELF_IDENTIFY", "AFRICAN", "COLOURED", "INDIAN", "OTHER", "PREFER_NOT_TO_SAY"])
      return false unless ethnicity_validator.valid?(@ethnicity)
      citizenship_validator = EnumAttributeValidator.new('String
      return false unless citizenship_validator.valid?(@citizenship)
      overtime_exemption_validator = EnumAttributeValidator.new('String', ["EXEMPT", "NON_EXEMPT"])
      return false unless overtime_exemption_validator.valid?(@overtime_exemption)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.nil?
        fail ArgumentError, 'id cannot be nil'
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] created_at Value to be assigned
    def created_at=(created_at)
      if created_at.nil?
        fail ArgumentError, 'created_at cannot be nil'
      end

      @created_at = created_at
    end

    # Custom attribute writer method with validation
    # @param [Object] updated_at Value to be assigned
    def updated_at=(updated_at)
      if updated_at.nil?
        fail ArgumentError, 'updated_at cannot be nil'
      end

      @updated_at = updated_at
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] country Object to be assigned
    def country=(country)
      validator = EnumAttributeValidator.new('String
      unless validator.valid?(country)
        fail ArgumentError, "invalid value for \"country\", must be one of #{validator.allowable_values}."
      end
      @country = country
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["INIT", "HIRED", "ACCEPTED", "ACTIVE", "TERMINATED"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gender Object to be assigned
    def gender=(gender)
      validator = EnumAttributeValidator.new('String', ["MALE", "FEMALE", "NONBINARY", "UNDETERMINED", "DIVERSE", "DOES_NOT_APPLY", "PREFER_NOT_TO_SAY"])
      unless validator.valid?(gender)
        fail ArgumentError, "invalid value for \"gender\", must be one of #{validator.allowable_values}."
      end
      @gender = gender
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] race Object to be assigned
    def race=(race)
      validator = EnumAttributeValidator.new('String', ["BLACK", "BROWN", "CHINESE", "EURASIAN", "INDIAN", "INDIGENOUS", "WHITE", "YELLOW", "NOT_INFORMED", "OTHER"])
      unless validator.valid?(race)
        fail ArgumentError, "invalid value for \"race\", must be one of #{validator.allowable_values}."
      end
      @race = race
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ethnicity Object to be assigned
    def ethnicity=(ethnicity)
      validator = EnumAttributeValidator.new('String', ["HISPANIC_OR_LATINO", "WHITE", "BLACK_OR_AFRICAN_AMERICAN", "NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER", "ASIAN", "AMERICAN_INDIAN_OR_ALASKA_NATIVE", "TWO_OR_MORE_RACES", "DECLINE_TO_SELF_IDENTIFY", "AFRICAN", "COLOURED", "INDIAN", "OTHER", "PREFER_NOT_TO_SAY"])
      unless validator.valid?(ethnicity)
        fail ArgumentError, "invalid value for \"ethnicity\", must be one of #{validator.allowable_values}."
      end
      @ethnicity = ethnicity
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] citizenship Object to be assigned
    def citizenship=(citizenship)
      validator = EnumAttributeValidator.new('String
      unless validator.valid?(citizenship)
        fail ArgumentError, "invalid value for \"citizenship\", must be one of #{validator.allowable_values}."
      end
      @citizenship = citizenship
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] overtime_exemption Object to be assigned
    def overtime_exemption=(overtime_exemption)
      validator = EnumAttributeValidator.new('String', ["EXEMPT", "NON_EXEMPT"])
      unless validator.valid?(overtime_exemption)
        fail ArgumentError, "invalid value for \"overtime_exemption\", must be one of #{validator.allowable_values}."
      end
      @overtime_exemption = overtime_exemption
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          user_id == o.user_id &&
          user == o.user &&
          manager_id == o.manager_id &&
          manager == o.manager &&
          legal_entity_id == o.legal_entity_id &&
          legal_entity == o.legal_entity &&
          country == o.country &&
          start_date == o.start_date &&
          end_date == o.end_date &&
          number == o.number &&
          work_email == o.work_email &&
          personal_email == o.personal_email &&
          status == o.status &&
          location == o.location &&
          employment_type_id == o.employment_type_id &&
          employment_type == o.employment_type &&
          gender == o.gender &&
          date_of_birth == o.date_of_birth &&
          race == o.race &&
          ethnicity == o.ethnicity &&
          citizenship == o.citizenship &&
          compensation_id == o.compensation_id &&
          compensation == o.compensation &&
          overtime_exemption == o.overtime_exemption &&
          department_id == o.department_id &&
          department == o.department &&
          teams_id == o.teams_id &&
          teams == o.teams &&
          title == o.title &&
          level_id == o.level_id &&
          level == o.level &&
          termination_details == o.termination_details &&
          custom_fields == o.custom_fields &&
          country_fields == o.country_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, created_at, updated_at, user_id, user, manager_id, manager, legal_entity_id, legal_entity, country, start_date, end_date, number, work_email, personal_email, status, location, employment_type_id, employment_type, gender, date_of_birth, race, ethnicity, citizenship, compensation_id, compensation, overtime_exemption, department_id, department, teams_id, teams, title, level_id, level, termination_details, custom_fields, country_fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
