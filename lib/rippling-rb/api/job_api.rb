=begin
#Rippling Platform API

#Documentation for the Rippling Platform API.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'cgi'

module RipplingRb
  class JobApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new job code
    # Create a new job code
    # @param [Hash] opts the optional parameters
    # @option opts [JobCodeRequest] :job_code_request 
    # @return [JobCode]
    def create_job_codes(opts = {})
      data, _status_code, _headers = create_job_codes_with_http_info(opts)
      data
    end

    # Create a new job code
    # Create a new job code
    # @param [Hash] opts the optional parameters
    # @option opts [JobCodeRequest] :job_code_request 
    # @return [Array<(JobCode, Integer, Hash)>] JobCode data, response status code and response headers
    def create_job_codes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JobApi.create_job_codes ...'
      end
      # resource path
      local_var_path = '/job-codes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'job_code_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'JobCode'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2Production', 'BearerTokenProduction']

      new_options = opts.merge(
        :operation => :"JobApi.create_job_codes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobApi#create_job_codes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new job dimension
    # Create a new job dimension
    # @param [Hash] opts the optional parameters
    # @option opts [JobDimensionRequest] :job_dimension_request 
    # @return [JobDimension]
    def create_job_dimensions(opts = {})
      data, _status_code, _headers = create_job_dimensions_with_http_info(opts)
      data
    end

    # Create a new job dimension
    # Create a new job dimension
    # @param [Hash] opts the optional parameters
    # @option opts [JobDimensionRequest] :job_dimension_request 
    # @return [Array<(JobDimension, Integer, Hash)>] JobDimension data, response status code and response headers
    def create_job_dimensions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JobApi.create_job_dimensions ...'
      end
      # resource path
      local_var_path = '/job-dimensions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'job_dimension_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'JobDimension'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2Production', 'BearerTokenProduction']

      new_options = opts.merge(
        :operation => :"JobApi.create_job_dimensions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobApi#create_job_dimensions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a job code
    # @param id [String] ID of the resource to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_job_codes(id, opts = {})
      delete_job_codes_with_http_info(id, opts)
      nil
    end

    # Delete a job code
    # @param id [String] ID of the resource to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_job_codes_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JobApi.delete_job_codes ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling JobApi.delete_job_codes"
      end
      # resource path
      local_var_path = '/job-codes/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2Production', 'BearerTokenProduction']

      new_options = opts.merge(
        :operation => :"JobApi.delete_job_codes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobApi#delete_job_codes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a job dimension
    # @param id [String] ID of the resource to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_job_dimensions(id, opts = {})
      delete_job_dimensions_with_http_info(id, opts)
      nil
    end

    # Delete a job dimension
    # @param id [String] ID of the resource to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_job_dimensions_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JobApi.delete_job_dimensions ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling JobApi.delete_job_dimensions"
      end
      # resource path
      local_var_path = '/job-dimensions/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2Production', 'BearerTokenProduction']

      new_options = opts.merge(
        :operation => :"JobApi.delete_job_dimensions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobApi#delete_job_dimensions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a specific job code
    # Retrieve a specific job code
    # @param id [String] ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [GetJobCodes200Response]
    def get_job_codes(id, opts = {})
      data, _status_code, _headers = get_job_codes_with_http_info(id, opts)
      data
    end

    # Retrieve a specific job code
    # Retrieve a specific job code
    # @param id [String] ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Array<(GetJobCodes200Response, Integer, Hash)>] GetJobCodes200Response data, response status code and response headers
    def get_job_codes_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JobApi.get_job_codes ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling JobApi.get_job_codes"
      end
      # resource path
      local_var_path = '/job-codes/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetJobCodes200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2Production', 'BearerTokenProduction']

      new_options = opts.merge(
        :operation => :"JobApi.get_job_codes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobApi#get_job_codes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a specific job dimension
    # Retrieve a specific job dimension
    # @param id [String] ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [GetJobDimensions200Response]
    def get_job_dimensions(id, opts = {})
      data, _status_code, _headers = get_job_dimensions_with_http_info(id, opts)
      data
    end

    # Retrieve a specific job dimension
    # Retrieve a specific job dimension
    # @param id [String] ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetJobDimensions200Response, Integer, Hash)>] GetJobDimensions200Response data, response status code and response headers
    def get_job_dimensions_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JobApi.get_job_dimensions ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling JobApi.get_job_dimensions"
      end
      # resource path
      local_var_path = '/job-dimensions/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetJobDimensions200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2Production', 'BearerTokenProduction']

      new_options = opts.merge(
        :operation => :"JobApi.get_job_dimensions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobApi#get_job_dimensions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List job codes
    # A List of job codes  - Requires: `API Tier 2`  - Filterable fields: `job_dimension_id`, `group_id`  - Expandable fields: `job_dimension`  - Sortable fields: `id`, `created_at`, `updated_at`
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter 
    # @option opts [String] :expand 
    # @option opts [String] :order_by 
    # @return [ListJobCodes200Response]
    def list_job_codes(opts = {})
      data, _status_code, _headers = list_job_codes_with_http_info(opts)
      data
    end

    # List job codes
    # A List of job codes  - Requires: &#x60;API Tier 2&#x60;  - Filterable fields: &#x60;job_dimension_id&#x60;, &#x60;group_id&#x60;  - Expandable fields: &#x60;job_dimension&#x60;  - Sortable fields: &#x60;id&#x60;, &#x60;created_at&#x60;, &#x60;updated_at&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter 
    # @option opts [String] :expand 
    # @option opts [String] :order_by 
    # @return [Array<(ListJobCodes200Response, Integer, Hash)>] ListJobCodes200Response data, response status code and response headers
    def list_job_codes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JobApi.list_job_codes ...'
      end
      # resource path
      local_var_path = '/job-codes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListJobCodes200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2Production', 'BearerTokenProduction']

      new_options = opts.merge(
        :operation => :"JobApi.list_job_codes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobApi#list_job_codes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List job dimensions
    # A List of job dimensions  - Requires: `API Tier 2`  - Filterable fields: `name`  - Sortable fields: `id`, `created_at`, `updated_at`
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter 
    # @option opts [String] :order_by 
    # @return [ListJobDimensions200Response]
    def list_job_dimensions(opts = {})
      data, _status_code, _headers = list_job_dimensions_with_http_info(opts)
      data
    end

    # List job dimensions
    # A List of job dimensions  - Requires: &#x60;API Tier 2&#x60;  - Filterable fields: &#x60;name&#x60;  - Sortable fields: &#x60;id&#x60;, &#x60;created_at&#x60;, &#x60;updated_at&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter 
    # @option opts [String] :order_by 
    # @return [Array<(ListJobDimensions200Response, Integer, Hash)>] ListJobDimensions200Response data, response status code and response headers
    def list_job_dimensions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JobApi.list_job_dimensions ...'
      end
      # resource path
      local_var_path = '/job-dimensions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListJobDimensions200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2Production', 'BearerTokenProduction']

      new_options = opts.merge(
        :operation => :"JobApi.list_job_dimensions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobApi#list_job_dimensions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a job code
    # Updated a specific job code
    # @param id [String] ID of the resource to patch
    # @param [Hash] opts the optional parameters
    # @option opts [JobCodeRequest] :job_code_request 
    # @return [JobCode]
    def update_job_codes(id, opts = {})
      data, _status_code, _headers = update_job_codes_with_http_info(id, opts)
      data
    end

    # Update a job code
    # Updated a specific job code
    # @param id [String] ID of the resource to patch
    # @param [Hash] opts the optional parameters
    # @option opts [JobCodeRequest] :job_code_request 
    # @return [Array<(JobCode, Integer, Hash)>] JobCode data, response status code and response headers
    def update_job_codes_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JobApi.update_job_codes ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling JobApi.update_job_codes"
      end
      # resource path
      local_var_path = '/job-codes/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'job_code_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'JobCode'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2Production', 'BearerTokenProduction']

      new_options = opts.merge(
        :operation => :"JobApi.update_job_codes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobApi#update_job_codes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a job dimension
    # Updated a specific job dimension
    # @param id [String] ID of the resource to patch
    # @param [Hash] opts the optional parameters
    # @option opts [JobDimensionRequest] :job_dimension_request 
    # @return [JobDimension]
    def update_job_dimensions(id, opts = {})
      data, _status_code, _headers = update_job_dimensions_with_http_info(id, opts)
      data
    end

    # Update a job dimension
    # Updated a specific job dimension
    # @param id [String] ID of the resource to patch
    # @param [Hash] opts the optional parameters
    # @option opts [JobDimensionRequest] :job_dimension_request 
    # @return [Array<(JobDimension, Integer, Hash)>] JobDimension data, response status code and response headers
    def update_job_dimensions_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JobApi.update_job_dimensions ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling JobApi.update_job_dimensions"
      end
      # resource path
      local_var_path = '/job-dimensions/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'job_dimension_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'JobDimension'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2Production', 'BearerTokenProduction']

      new_options = opts.merge(
        :operation => :"JobApi.update_job_dimensions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobApi#update_job_dimensions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
