=begin
#Rippling Platform API

#Documentation for the Rippling Platform API.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'cgi'

module RipplingRb
  class SupergroupsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve a specific supergroup
    # Retrieve a specific supergroup.
    # @param id [String] ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [GetSupergroups200Response]
    def get_supergroups(id, opts = {})
      data, _status_code, _headers = get_supergroups_with_http_info(id, opts)
      data
    end

    # Retrieve a specific supergroup
    # Retrieve a specific supergroup.
    # @param id [String] ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetSupergroups200Response, Integer, Hash)>] GetSupergroups200Response data, response status code and response headers
    def get_supergroups_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupergroupsApi.get_supergroups ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SupergroupsApi.get_supergroups"
      end
      # resource path
      local_var_path = '/supergroups/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetSupergroups200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2Production', 'BearerTokenProduction']

      new_options = opts.merge(
        :operation => :"SupergroupsApi.get_supergroups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupergroupsApi#get_supergroups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List supergroups
    # Retrieve supergroups matching the input parameters.  - Requires: `API Tier 1`  - Filterable fields: `app_owner_id`, `group_type`  - Sortable fields: `id`, `created_at`, `updated_at`
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter 
    # @option opts [String] :order_by 
    # @return [ListSupergroups200Response]
    def list_supergroups(opts = {})
      data, _status_code, _headers = list_supergroups_with_http_info(opts)
      data
    end

    # List supergroups
    # Retrieve supergroups matching the input parameters.  - Requires: &#x60;API Tier 1&#x60;  - Filterable fields: &#x60;app_owner_id&#x60;, &#x60;group_type&#x60;  - Sortable fields: &#x60;id&#x60;, &#x60;created_at&#x60;, &#x60;updated_at&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter 
    # @option opts [String] :order_by 
    # @return [Array<(ListSupergroups200Response, Integer, Hash)>] ListSupergroups200Response data, response status code and response headers
    def list_supergroups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupergroupsApi.list_supergroups ...'
      end
      # resource path
      local_var_path = '/supergroups'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListSupergroups200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2Production', 'BearerTokenProduction']

      new_options = opts.merge(
        :operation => :"SupergroupsApi.list_supergroups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupergroupsApi#list_supergroups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List supergroup exclusion members
    # Retrieve supergroup exclusion members matching the input parameters.  - Requires: `API Tier 1`  - Sortable fields: `id`, `created_at`, `updated_at`
    # @param group_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :order_by 
    # @return [ListSupergroupsGroupIdMembers200Response]
    def list_supergroups__group_id_exclusion_members(group_id, opts = {})
      data, _status_code, _headers = list_supergroups__group_id_exclusion_members_with_http_info(group_id, opts)
      data
    end

    # List supergroup exclusion members
    # Retrieve supergroup exclusion members matching the input parameters.  - Requires: &#x60;API Tier 1&#x60;  - Sortable fields: &#x60;id&#x60;, &#x60;created_at&#x60;, &#x60;updated_at&#x60;
    # @param group_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :order_by 
    # @return [Array<(ListSupergroupsGroupIdMembers200Response, Integer, Hash)>] ListSupergroupsGroupIdMembers200Response data, response status code and response headers
    def list_supergroups__group_id_exclusion_members_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupergroupsApi.list_supergroups__group_id_exclusion_members ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SupergroupsApi.list_supergroups__group_id_exclusion_members"
      end
      # resource path
      local_var_path = '/supergroups/{group_id}/exclusion-members'.sub('{' + 'group_id' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListSupergroupsGroupIdMembers200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2Production', 'BearerTokenProduction']

      new_options = opts.merge(
        :operation => :"SupergroupsApi.list_supergroups__group_id_exclusion_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupergroupsApi#list_supergroups__group_id_exclusion_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List supergroup inclusion members
    # Retrieve supergroup inclusion members matching the input parameters.  - Requires: `API Tier 1`  - Sortable fields: `id`, `created_at`, `updated_at`
    # @param group_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :order_by 
    # @return [ListSupergroupsGroupIdMembers200Response]
    def list_supergroups__group_id_inclusion_members(group_id, opts = {})
      data, _status_code, _headers = list_supergroups__group_id_inclusion_members_with_http_info(group_id, opts)
      data
    end

    # List supergroup inclusion members
    # Retrieve supergroup inclusion members matching the input parameters.  - Requires: &#x60;API Tier 1&#x60;  - Sortable fields: &#x60;id&#x60;, &#x60;created_at&#x60;, &#x60;updated_at&#x60;
    # @param group_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :order_by 
    # @return [Array<(ListSupergroupsGroupIdMembers200Response, Integer, Hash)>] ListSupergroupsGroupIdMembers200Response data, response status code and response headers
    def list_supergroups__group_id_inclusion_members_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupergroupsApi.list_supergroups__group_id_inclusion_members ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SupergroupsApi.list_supergroups__group_id_inclusion_members"
      end
      # resource path
      local_var_path = '/supergroups/{group_id}/inclusion-members'.sub('{' + 'group_id' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListSupergroupsGroupIdMembers200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2Production', 'BearerTokenProduction']

      new_options = opts.merge(
        :operation => :"SupergroupsApi.list_supergroups__group_id_inclusion_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupergroupsApi#list_supergroups__group_id_inclusion_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List supergroup members
    # Retrieve supergroup members matching the input parameters.  - Requires: `API Tier 1`  - Sortable fields: `id`, `created_at`, `updated_at`
    # @param group_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :order_by 
    # @return [ListSupergroupsGroupIdMembers200Response]
    def list_supergroups__group_id_members(group_id, opts = {})
      data, _status_code, _headers = list_supergroups__group_id_members_with_http_info(group_id, opts)
      data
    end

    # List supergroup members
    # Retrieve supergroup members matching the input parameters.  - Requires: &#x60;API Tier 1&#x60;  - Sortable fields: &#x60;id&#x60;, &#x60;created_at&#x60;, &#x60;updated_at&#x60;
    # @param group_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :order_by 
    # @return [Array<(ListSupergroupsGroupIdMembers200Response, Integer, Hash)>] ListSupergroupsGroupIdMembers200Response data, response status code and response headers
    def list_supergroups__group_id_members_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupergroupsApi.list_supergroups__group_id_members ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SupergroupsApi.list_supergroups__group_id_members"
      end
      # resource path
      local_var_path = '/supergroups/{group_id}/members'.sub('{' + 'group_id' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListSupergroupsGroupIdMembers200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2Production', 'BearerTokenProduction']

      new_options = opts.merge(
        :operation => :"SupergroupsApi.list_supergroups__group_id_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupergroupsApi#list_supergroups__group_id_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update supergroup exclusion members
    # Update the list of supergroup exclusion members.
    # @param group_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateSupergroupsGroupIdInclusionMembersRequest] :update_supergroups_group_id_inclusion_members_request 
    # @return [UpdateSupergroupsGroupIdInclusionMembers200Response]
    def update_supergroups__group_id_exclusion_members(group_id, opts = {})
      data, _status_code, _headers = update_supergroups__group_id_exclusion_members_with_http_info(group_id, opts)
      data
    end

    # Update supergroup exclusion members
    # Update the list of supergroup exclusion members.
    # @param group_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateSupergroupsGroupIdInclusionMembersRequest] :update_supergroups_group_id_inclusion_members_request 
    # @return [Array<(UpdateSupergroupsGroupIdInclusionMembers200Response, Integer, Hash)>] UpdateSupergroupsGroupIdInclusionMembers200Response data, response status code and response headers
    def update_supergroups__group_id_exclusion_members_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupergroupsApi.update_supergroups__group_id_exclusion_members ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SupergroupsApi.update_supergroups__group_id_exclusion_members"
      end
      # resource path
      local_var_path = '/supergroups/{group_id}/exclusion-members'.sub('{' + 'group_id' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_supergroups_group_id_inclusion_members_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateSupergroupsGroupIdInclusionMembers200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2Production', 'BearerTokenProduction']

      new_options = opts.merge(
        :operation => :"SupergroupsApi.update_supergroups__group_id_exclusion_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupergroupsApi#update_supergroups__group_id_exclusion_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update supergroup inclusion members
    # Update the list of supergroup inclusion members.
    # @param group_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateSupergroupsGroupIdInclusionMembersRequest] :update_supergroups_group_id_inclusion_members_request 
    # @return [UpdateSupergroupsGroupIdInclusionMembers200Response]
    def update_supergroups__group_id_inclusion_members(group_id, opts = {})
      data, _status_code, _headers = update_supergroups__group_id_inclusion_members_with_http_info(group_id, opts)
      data
    end

    # Update supergroup inclusion members
    # Update the list of supergroup inclusion members.
    # @param group_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateSupergroupsGroupIdInclusionMembersRequest] :update_supergroups_group_id_inclusion_members_request 
    # @return [Array<(UpdateSupergroupsGroupIdInclusionMembers200Response, Integer, Hash)>] UpdateSupergroupsGroupIdInclusionMembers200Response data, response status code and response headers
    def update_supergroups__group_id_inclusion_members_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupergroupsApi.update_supergroups__group_id_inclusion_members ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SupergroupsApi.update_supergroups__group_id_inclusion_members"
      end
      # resource path
      local_var_path = '/supergroups/{group_id}/inclusion-members'.sub('{' + 'group_id' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_supergroups_group_id_inclusion_members_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateSupergroupsGroupIdInclusionMembers200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2Production', 'BearerTokenProduction']

      new_options = opts.merge(
        :operation => :"SupergroupsApi.update_supergroups__group_id_inclusion_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupergroupsApi#update_supergroups__group_id_inclusion_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
