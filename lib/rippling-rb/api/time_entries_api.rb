=begin
#Rippling Platform API

#Documentation for the Rippling Platform API.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'cgi'

module RipplingRb
  class TimeEntriesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new time entry
    # Create a new time entry
    # @param [Hash] opts the optional parameters
    # @option opts [TimeEntryRequest] :time_entry_request 
    # @return [TimeEntry]
    def create_time_entries(opts = {})
      data, _status_code, _headers = create_time_entries_with_http_info(opts)
      data
    end

    # Create a new time entry
    # Create a new time entry
    # @param [Hash] opts the optional parameters
    # @option opts [TimeEntryRequest] :time_entry_request 
    # @return [Array<(TimeEntry, Integer, Hash)>] TimeEntry data, response status code and response headers
    def create_time_entries_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TimeEntriesApi.create_time_entries ...'
      end
      # resource path
      local_var_path = '/time-entries'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'time_entry_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'TimeEntry'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2Production', 'BearerTokenProduction']

      new_options = opts.merge(
        :operation => :"TimeEntriesApi.create_time_entries",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TimeEntriesApi#create_time_entries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a time entry
    # @param id [String] ID of the resource to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_time_entries(id, opts = {})
      delete_time_entries_with_http_info(id, opts)
      nil
    end

    # Delete a time entry
    # @param id [String] ID of the resource to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_time_entries_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TimeEntriesApi.delete_time_entries ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TimeEntriesApi.delete_time_entries"
      end
      # resource path
      local_var_path = '/time-entries/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2Production', 'BearerTokenProduction']

      new_options = opts.merge(
        :operation => :"TimeEntriesApi.delete_time_entries",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TimeEntriesApi#delete_time_entries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a specific time card
    # Retrieve a specific time card
    # @param id [String] ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [GetTimeCards200Response]
    def get_time_cards(id, opts = {})
      data, _status_code, _headers = get_time_cards_with_http_info(id, opts)
      data
    end

    # Retrieve a specific time card
    # Retrieve a specific time card
    # @param id [String] ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Array<(GetTimeCards200Response, Integer, Hash)>] GetTimeCards200Response data, response status code and response headers
    def get_time_cards_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TimeEntriesApi.get_time_cards ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TimeEntriesApi.get_time_cards"
      end
      # resource path
      local_var_path = '/time-cards/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTimeCards200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2Production', 'BearerTokenProduction']

      new_options = opts.merge(
        :operation => :"TimeEntriesApi.get_time_cards",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TimeEntriesApi#get_time_cards\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a specific time entry
    # Retrieve a specific time entry
    # @param id [String] ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [GetTimeEntries200Response]
    def get_time_entries(id, opts = {})
      data, _status_code, _headers = get_time_entries_with_http_info(id, opts)
      data
    end

    # Retrieve a specific time entry
    # Retrieve a specific time entry
    # @param id [String] ID of the resource to return
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand 
    # @return [Array<(GetTimeEntries200Response, Integer, Hash)>] GetTimeEntries200Response data, response status code and response headers
    def get_time_entries_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TimeEntriesApi.get_time_entries ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TimeEntriesApi.get_time_entries"
      end
      # resource path
      local_var_path = '/time-entries/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTimeEntries200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2Production', 'BearerTokenProduction']

      new_options = opts.merge(
        :operation => :"TimeEntriesApi.get_time_entries",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TimeEntriesApi#get_time_entries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List time cards
    # A List of time cards  - Requires: `API Tier 2`  - Filterable fields: `pay_period.start_date`, `worker_id`  - Expandable fields: `worker`  - Sortable fields: `id`, `created_at`, `updated_at`
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter 
    # @option opts [String] :expand 
    # @option opts [String] :order_by 
    # @return [ListTimeCards200Response]
    def list_time_cards(opts = {})
      data, _status_code, _headers = list_time_cards_with_http_info(opts)
      data
    end

    # List time cards
    # A List of time cards  - Requires: &#x60;API Tier 2&#x60;  - Filterable fields: &#x60;pay_period.start_date&#x60;, &#x60;worker_id&#x60;  - Expandable fields: &#x60;worker&#x60;  - Sortable fields: &#x60;id&#x60;, &#x60;created_at&#x60;, &#x60;updated_at&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter 
    # @option opts [String] :expand 
    # @option opts [String] :order_by 
    # @return [Array<(ListTimeCards200Response, Integer, Hash)>] ListTimeCards200Response data, response status code and response headers
    def list_time_cards_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TimeEntriesApi.list_time_cards ...'
      end
      # resource path
      local_var_path = '/time-cards'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListTimeCards200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2Production', 'BearerTokenProduction']

      new_options = opts.merge(
        :operation => :"TimeEntriesApi.list_time_cards",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TimeEntriesApi#list_time_cards\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List time entries
    # A List of time entries  - Requires: `API Tier 2`  - Filterable fields: `worker_id`, `start_time`, `pay_period.start_date`  - Expandable fields: `worker`, `time_card`  - Sortable fields: `id`, `created_at`, `updated_at`
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter 
    # @option opts [String] :expand 
    # @option opts [String] :order_by 
    # @return [ListTimeEntries200Response]
    def list_time_entries(opts = {})
      data, _status_code, _headers = list_time_entries_with_http_info(opts)
      data
    end

    # List time entries
    # A List of time entries  - Requires: &#x60;API Tier 2&#x60;  - Filterable fields: &#x60;worker_id&#x60;, &#x60;start_time&#x60;, &#x60;pay_period.start_date&#x60;  - Expandable fields: &#x60;worker&#x60;, &#x60;time_card&#x60;  - Sortable fields: &#x60;id&#x60;, &#x60;created_at&#x60;, &#x60;updated_at&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter 
    # @option opts [String] :expand 
    # @option opts [String] :order_by 
    # @return [Array<(ListTimeEntries200Response, Integer, Hash)>] ListTimeEntries200Response data, response status code and response headers
    def list_time_entries_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TimeEntriesApi.list_time_entries ...'
      end
      # resource path
      local_var_path = '/time-entries'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListTimeEntries200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2Production', 'BearerTokenProduction']

      new_options = opts.merge(
        :operation => :"TimeEntriesApi.list_time_entries",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TimeEntriesApi#list_time_entries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a time entry
    # Updated a specific time entry
    # @param id [String] ID of the resource to patch
    # @param [Hash] opts the optional parameters
    # @option opts [TimeEntryRequest] :time_entry_request 
    # @return [TimeEntry]
    def update_time_entries(id, opts = {})
      data, _status_code, _headers = update_time_entries_with_http_info(id, opts)
      data
    end

    # Update a time entry
    # Updated a specific time entry
    # @param id [String] ID of the resource to patch
    # @param [Hash] opts the optional parameters
    # @option opts [TimeEntryRequest] :time_entry_request 
    # @return [Array<(TimeEntry, Integer, Hash)>] TimeEntry data, response status code and response headers
    def update_time_entries_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TimeEntriesApi.update_time_entries ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TimeEntriesApi.update_time_entries"
      end
      # resource path
      local_var_path = '/time-entries/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'time_entry_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'TimeEntry'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2Production', 'BearerTokenProduction']

      new_options = opts.merge(
        :operation => :"TimeEntriesApi.update_time_entries",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TimeEntriesApi#update_time_entries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
