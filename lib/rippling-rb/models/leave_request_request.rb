=begin
#Rippling Platform API

#Documentation for the Rippling Platform API.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'date'
require 'time'

module RipplingRb
  # 
  class LeaveRequestRequest
    # The ID of the worker associated with the leave request.
    attr_accessor :worker_id

    # The ID of the worker who requested the leave request.
    attr_accessor :requester_id

    # The status of the leave request.
    attr_accessor :status

    # The start date of the leave request.
    attr_accessor :start_date

    # The start time of the leave request.
    attr_accessor :start_time

    # The end date of the leave request.
    attr_accessor :end_date

    # The end time of the leave request.
    attr_accessor :end_time

    # The number of hours to take off on the start date.
    attr_accessor :start_date_custom_hours

    # The number of hours to take off on the end date.
    attr_accessor :end_date_custom_hours

    # The comments associated with the leave request.
    attr_accessor :comments

    # The ID of the leave policy associated with the leave request, either leave_policy_id or leave_type_id must be provided.
    attr_accessor :leave_policy_id

    # The ID of the leave type associated with the leave request, either leave_policy_id or leave_type_id must be provided.
    attr_accessor :leave_type_id

    # The ID of the leave event associated with the leave request, if any.
    attr_accessor :leave_event_id

    # The reason for the leave request.
    attr_accessor :reason_for_leave

    # The ID of the worker who reviewed the leave request.
    attr_accessor :reviewer_id

    # The timestamp of when the leave request was reviewed.
    attr_accessor :reviewed_at

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'worker_id' => :'worker_id',
        :'requester_id' => :'requester_id',
        :'status' => :'status',
        :'start_date' => :'start_date',
        :'start_time' => :'start_time',
        :'end_date' => :'end_date',
        :'end_time' => :'end_time',
        :'start_date_custom_hours' => :'start_date_custom_hours',
        :'end_date_custom_hours' => :'end_date_custom_hours',
        :'comments' => :'comments',
        :'leave_policy_id' => :'leave_policy_id',
        :'leave_type_id' => :'leave_type_id',
        :'leave_event_id' => :'leave_event_id',
        :'reason_for_leave' => :'reason_for_leave',
        :'reviewer_id' => :'reviewer_id',
        :'reviewed_at' => :'reviewed_at'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'worker_id' => :'String',
        :'requester_id' => :'String',
        :'status' => :'String',
        :'start_date' => :'String',
        :'start_time' => :'String',
        :'end_date' => :'String',
        :'end_time' => :'String',
        :'start_date_custom_hours' => :'Float',
        :'end_date_custom_hours' => :'Float',
        :'comments' => :'String',
        :'leave_policy_id' => :'String',
        :'leave_type_id' => :'String',
        :'leave_event_id' => :'String',
        :'reason_for_leave' => :'String',
        :'reviewer_id' => :'String',
        :'reviewed_at' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `RipplingRb::LeaveRequestRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `RipplingRb::LeaveRequestRequest`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'worker_id')
        self.worker_id = attributes[:'worker_id']
      else
        self.worker_id = nil
      end

      if attributes.key?(:'requester_id')
        self.requester_id = attributes[:'requester_id']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = nil
      end

      if attributes.key?(:'start_date')
        self.start_date = attributes[:'start_date']
      else
        self.start_date = nil
      end

      if attributes.key?(:'start_time')
        self.start_time = attributes[:'start_time']
      end

      if attributes.key?(:'end_date')
        self.end_date = attributes[:'end_date']
      else
        self.end_date = nil
      end

      if attributes.key?(:'end_time')
        self.end_time = attributes[:'end_time']
      end

      if attributes.key?(:'start_date_custom_hours')
        self.start_date_custom_hours = attributes[:'start_date_custom_hours']
      end

      if attributes.key?(:'end_date_custom_hours')
        self.end_date_custom_hours = attributes[:'end_date_custom_hours']
      end

      if attributes.key?(:'comments')
        self.comments = attributes[:'comments']
      end

      if attributes.key?(:'leave_policy_id')
        self.leave_policy_id = attributes[:'leave_policy_id']
      end

      if attributes.key?(:'leave_type_id')
        self.leave_type_id = attributes[:'leave_type_id']
      end

      if attributes.key?(:'leave_event_id')
        self.leave_event_id = attributes[:'leave_event_id']
      end

      if attributes.key?(:'reason_for_leave')
        self.reason_for_leave = attributes[:'reason_for_leave']
      end

      if attributes.key?(:'reviewer_id')
        self.reviewer_id = attributes[:'reviewer_id']
      end

      if attributes.key?(:'reviewed_at')
        self.reviewed_at = attributes[:'reviewed_at']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @worker_id.nil?
        invalid_properties.push('invalid value for "worker_id", worker_id cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @start_date.nil?
        invalid_properties.push('invalid value for "start_date", start_date cannot be nil.')
      end

      if @end_date.nil?
        invalid_properties.push('invalid value for "end_date", end_date cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @worker_id.nil?
      return false if @status.nil?
      status_validator = EnumAttributeValidator.new('String', ["PENDING", "APPROVED", "REJECTED", "CANCELED"])
      return false unless status_validator.valid?(@status)
      return false if @start_date.nil?
      return false if @end_date.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] worker_id Value to be assigned
    def worker_id=(worker_id)
      if worker_id.nil?
        fail ArgumentError, 'worker_id cannot be nil'
      end

      @worker_id = worker_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["PENDING", "APPROVED", "REJECTED", "CANCELED"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] start_date Value to be assigned
    def start_date=(start_date)
      if start_date.nil?
        fail ArgumentError, 'start_date cannot be nil'
      end

      @start_date = start_date
    end

    # Custom attribute writer method with validation
    # @param [Object] end_date Value to be assigned
    def end_date=(end_date)
      if end_date.nil?
        fail ArgumentError, 'end_date cannot be nil'
      end

      @end_date = end_date
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          worker_id == o.worker_id &&
          requester_id == o.requester_id &&
          status == o.status &&
          start_date == o.start_date &&
          start_time == o.start_time &&
          end_date == o.end_date &&
          end_time == o.end_time &&
          start_date_custom_hours == o.start_date_custom_hours &&
          end_date_custom_hours == o.end_date_custom_hours &&
          comments == o.comments &&
          leave_policy_id == o.leave_policy_id &&
          leave_type_id == o.leave_type_id &&
          leave_event_id == o.leave_event_id &&
          reason_for_leave == o.reason_for_leave &&
          reviewer_id == o.reviewer_id &&
          reviewed_at == o.reviewed_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [worker_id, requester_id, status, start_date, start_time, end_date, end_time, start_date_custom_hours, end_date_custom_hours, comments, leave_policy_id, leave_type_id, leave_event_id, reason_for_leave, reviewer_id, reviewed_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = RipplingRb.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
