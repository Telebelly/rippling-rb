=begin
#Rippling Platform API

#Documentation for the Rippling Platform API.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'date'
require 'time'

module RipplingRb
  # 
  class CustomObjectField
    # Identifier field
    attr_accessor :id

    # Record creation date
    attr_accessor :created_at

    # Record update date
    attr_accessor :updated_at

    # The name of the custom object field
    attr_accessor :name

    # The custom object which the field belongs to
    attr_accessor :custom_object

    # The description of the custom object field
    attr_accessor :description

    # The api name of the custom object field
    attr_accessor :api_name

    # The field type
    attr_accessor :data_type

    # This field specifies whether a particular column value has unique values
    attr_accessor :is_unique

    # whether the field is imuatable
    attr_accessor :is_immutable

    # whether the field is standard field
    attr_accessor :is_standard

    # The id of the package which the custom object field belongs to
    attr_accessor :managed_package_install_id

    # whether the history is enable for the field
    attr_accessor :enable_history

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'created_at' => :'created_at',
        :'updated_at' => :'updated_at',
        :'name' => :'name',
        :'custom_object' => :'custom_object',
        :'description' => :'description',
        :'api_name' => :'api_name',
        :'data_type' => :'data_type',
        :'is_unique' => :'is_unique',
        :'is_immutable' => :'is_immutable',
        :'is_standard' => :'is_standard',
        :'managed_package_install_id' => :'managed_package_install_id',
        :'enable_history' => :'enable_history'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'created_at' => :'String',
        :'updated_at' => :'String',
        :'name' => :'String',
        :'custom_object' => :'String',
        :'description' => :'String',
        :'api_name' => :'String',
        :'data_type' => :'Object',
        :'is_unique' => :'Boolean',
        :'is_immutable' => :'Boolean',
        :'is_standard' => :'Boolean',
        :'managed_package_install_id' => :'String',
        :'enable_history' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `RipplingRb::CustomObjectField` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `RipplingRb::CustomObjectField`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      else
        self.created_at = nil
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      else
        self.updated_at = nil
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'custom_object')
        self.custom_object = attributes[:'custom_object']
      else
        self.custom_object = nil
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'api_name')
        self.api_name = attributes[:'api_name']
      else
        self.api_name = nil
      end

      if attributes.key?(:'data_type')
        self.data_type = attributes[:'data_type']
      else
        self.data_type = nil
      end

      if attributes.key?(:'is_unique')
        self.is_unique = attributes[:'is_unique']
      else
        self.is_unique = nil
      end

      if attributes.key?(:'is_immutable')
        self.is_immutable = attributes[:'is_immutable']
      else
        self.is_immutable = nil
      end

      if attributes.key?(:'is_standard')
        self.is_standard = attributes[:'is_standard']
      else
        self.is_standard = nil
      end

      if attributes.key?(:'managed_package_install_id')
        self.managed_package_install_id = attributes[:'managed_package_install_id']
      end

      if attributes.key?(:'enable_history')
        self.enable_history = attributes[:'enable_history']
      else
        self.enable_history = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @custom_object.nil?
        invalid_properties.push('invalid value for "custom_object", custom_object cannot be nil.')
      end

      if @api_name.nil?
        invalid_properties.push('invalid value for "api_name", api_name cannot be nil.')
      end

      if @data_type.nil?
        invalid_properties.push('invalid value for "data_type", data_type cannot be nil.')
      end

      if @is_unique.nil?
        invalid_properties.push('invalid value for "is_unique", is_unique cannot be nil.')
      end

      if @is_immutable.nil?
        invalid_properties.push('invalid value for "is_immutable", is_immutable cannot be nil.')
      end

      if @is_standard.nil?
        invalid_properties.push('invalid value for "is_standard", is_standard cannot be nil.')
      end

      if @enable_history.nil?
        invalid_properties.push('invalid value for "enable_history", enable_history cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @id.nil?
      return false if @created_at.nil?
      return false if @updated_at.nil?
      return false if @name.nil?
      return false if @custom_object.nil?
      return false if @api_name.nil?
      return false if @data_type.nil?
      return false if @is_unique.nil?
      return false if @is_immutable.nil?
      return false if @is_standard.nil?
      return false if @enable_history.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.nil?
        fail ArgumentError, 'id cannot be nil'
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] created_at Value to be assigned
    def created_at=(created_at)
      if created_at.nil?
        fail ArgumentError, 'created_at cannot be nil'
      end

      @created_at = created_at
    end

    # Custom attribute writer method with validation
    # @param [Object] updated_at Value to be assigned
    def updated_at=(updated_at)
      if updated_at.nil?
        fail ArgumentError, 'updated_at cannot be nil'
      end

      @updated_at = updated_at
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_object Value to be assigned
    def custom_object=(custom_object)
      if custom_object.nil?
        fail ArgumentError, 'custom_object cannot be nil'
      end

      @custom_object = custom_object
    end

    # Custom attribute writer method with validation
    # @param [Object] api_name Value to be assigned
    def api_name=(api_name)
      if api_name.nil?
        fail ArgumentError, 'api_name cannot be nil'
      end

      @api_name = api_name
    end

    # Custom attribute writer method with validation
    # @param [Object] data_type Value to be assigned
    def data_type=(data_type)
      if data_type.nil?
        fail ArgumentError, 'data_type cannot be nil'
      end

      @data_type = data_type
    end

    # Custom attribute writer method with validation
    # @param [Object] is_unique Value to be assigned
    def is_unique=(is_unique)
      if is_unique.nil?
        fail ArgumentError, 'is_unique cannot be nil'
      end

      @is_unique = is_unique
    end

    # Custom attribute writer method with validation
    # @param [Object] is_immutable Value to be assigned
    def is_immutable=(is_immutable)
      if is_immutable.nil?
        fail ArgumentError, 'is_immutable cannot be nil'
      end

      @is_immutable = is_immutable
    end

    # Custom attribute writer method with validation
    # @param [Object] is_standard Value to be assigned
    def is_standard=(is_standard)
      if is_standard.nil?
        fail ArgumentError, 'is_standard cannot be nil'
      end

      @is_standard = is_standard
    end

    # Custom attribute writer method with validation
    # @param [Object] enable_history Value to be assigned
    def enable_history=(enable_history)
      if enable_history.nil?
        fail ArgumentError, 'enable_history cannot be nil'
      end

      @enable_history = enable_history
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          name == o.name &&
          custom_object == o.custom_object &&
          description == o.description &&
          api_name == o.api_name &&
          data_type == o.data_type &&
          is_unique == o.is_unique &&
          is_immutable == o.is_immutable &&
          is_standard == o.is_standard &&
          managed_package_install_id == o.managed_package_install_id &&
          enable_history == o.enable_history
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, created_at, updated_at, name, custom_object, description, api_name, data_type, is_unique, is_immutable, is_standard, managed_package_install_id, enable_history].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = RipplingRb.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
