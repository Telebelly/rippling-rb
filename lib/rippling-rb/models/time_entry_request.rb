=begin
#Rippling Platform API

#Documentation for the Rippling Platform API.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'date'
require 'time'

module RipplingRb
  # 
  class TimeEntryRequest
    # The ID of the worker associated with the time entry.
    attr_accessor :worker_id

    # The duration of the time entry.
    attr_accessor :duration

    # The date of the time entry if using duration.
    attr_accessor :start_date

    # The comments associated with the time entry.
    attr_accessor :comments

    # The job shifts worked during the time entry.
    attr_accessor :job_shifts

    # The breaks taken during the time entry.
    attr_accessor :breaks

    # The tags associated with the time entry.
    attr_accessor :tags

    # The unique key of the time entry in an outside system. If set, no other time entry with the same key can be created.
    attr_accessor :idempotency_key

    # Whether the time entry should create an extra hours run.
    attr_accessor :create_extra_hours_run

    # The status of the time entry.
    attr_accessor :status

    # The pay period associated with the time card.
    attr_accessor :pay_period

    # Arbitrary shift inputs collected on the time entry
    attr_accessor :shift_input_values

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'worker_id' => :'worker_id',
        :'duration' => :'duration',
        :'start_date' => :'start_date',
        :'comments' => :'comments',
        :'job_shifts' => :'job_shifts',
        :'breaks' => :'breaks',
        :'tags' => :'tags',
        :'idempotency_key' => :'idempotency_key',
        :'create_extra_hours_run' => :'create_extra_hours_run',
        :'status' => :'status',
        :'pay_period' => :'pay_period',
        :'shift_input_values' => :'shift_input_values'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'worker_id' => :'String',
        :'duration' => :'Float',
        :'start_date' => :'String',
        :'comments' => :'Array<TimeEntryCommentRequest>',
        :'job_shifts' => :'Array<JobShiftRequest>',
        :'breaks' => :'Array<BreakRequest>',
        :'tags' => :'Array<String>',
        :'idempotency_key' => :'String',
        :'create_extra_hours_run' => :'Boolean',
        :'status' => :'String',
        :'pay_period' => :'PayPeriodRequest',
        :'shift_input_values' => :'Array<ShiftInputValueRequest>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `RipplingRb::TimeEntryRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `RipplingRb::TimeEntryRequest`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'worker_id')
        self.worker_id = attributes[:'worker_id']
      else
        self.worker_id = nil
      end

      if attributes.key?(:'duration')
        self.duration = attributes[:'duration']
      end

      if attributes.key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.key?(:'comments')
        if (value = attributes[:'comments']).is_a?(Array)
          self.comments = value
        end
      end

      if attributes.key?(:'job_shifts')
        if (value = attributes[:'job_shifts']).is_a?(Array)
          self.job_shifts = value
        end
      end

      if attributes.key?(:'breaks')
        if (value = attributes[:'breaks']).is_a?(Array)
          self.breaks = value
        end
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'idempotency_key')
        self.idempotency_key = attributes[:'idempotency_key']
      end

      if attributes.key?(:'create_extra_hours_run')
        self.create_extra_hours_run = attributes[:'create_extra_hours_run']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'pay_period')
        self.pay_period = attributes[:'pay_period']
      end

      if attributes.key?(:'shift_input_values')
        if (value = attributes[:'shift_input_values']).is_a?(Array)
          self.shift_input_values = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @worker_id.nil?
        invalid_properties.push('invalid value for "worker_id", worker_id cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @worker_id.nil?
      status_validator = EnumAttributeValidator.new('String', ["DRAFT", "APPROVED", "PAID", "FINALIZED"])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] worker_id Value to be assigned
    def worker_id=(worker_id)
      if worker_id.nil?
        fail ArgumentError, 'worker_id cannot be nil'
      end

      @worker_id = worker_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["DRAFT", "APPROVED", "PAID", "FINALIZED"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          worker_id == o.worker_id &&
          duration == o.duration &&
          start_date == o.start_date &&
          comments == o.comments &&
          job_shifts == o.job_shifts &&
          breaks == o.breaks &&
          tags == o.tags &&
          idempotency_key == o.idempotency_key &&
          create_extra_hours_run == o.create_extra_hours_run &&
          status == o.status &&
          pay_period == o.pay_period &&
          shift_input_values == o.shift_input_values
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [worker_id, duration, start_date, comments, job_shifts, breaks, tags, idempotency_key, create_extra_hours_run, status, pay_period, shift_input_values].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = RipplingRb.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
