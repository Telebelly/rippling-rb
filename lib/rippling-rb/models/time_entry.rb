=begin
#Rippling Platform API

#Documentation for the Rippling Platform API.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'date'
require 'time'

module RipplingRb
  # 
  class TimeEntry
    # Identifier field
    attr_accessor :id

    # Record creation date
    attr_accessor :created_at

    # Record update date
    attr_accessor :updated_at

    # The ID of the worker associated with the time entry.
    attr_accessor :worker_id

    # The worker associated with the time entry.  Expandable field
    attr_accessor :worker

    # The start time of the time entry.
    attr_accessor :start_time

    # The end time of the time entry.
    attr_accessor :end_time

    # The comments associated with the time entry.
    attr_accessor :comments

    # The job shifts worked during the time entry.
    attr_accessor :job_shifts

    # The breaks taken during the time entry.
    attr_accessor :breaks

    # The premiums earned during the time entry.
    attr_accessor :premiums

    # The piece-rate premiums earned during the time entry.
    attr_accessor :piece_rate_premiums

    # The pay rates for each segment of the time entry.
    attr_accessor :segments

    # A summary of the time entry.
    attr_accessor :time_entry_summary

    # The ID of the time card associated with the time entry.
    attr_accessor :time_card_id

    # The time card associated with the time entry.  Expandable field
    attr_accessor :time_card

    # The tags associated with the time entry.
    attr_accessor :tags

    # The unique key of the time entry in an outside system. If set, no other time entry with the same key can be created.
    attr_accessor :idempotency_key

    # Whether the time entry should create an extra hours run.
    attr_accessor :create_extra_hours_run

    # The status of the time entry.
    attr_accessor :status

    # The pay period associated with the time card.
    attr_accessor :pay_period

    # Arbitrary shift inputs collected on the time entry
    attr_accessor :shift_input_values

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'created_at' => :'created_at',
        :'updated_at' => :'updated_at',
        :'worker_id' => :'worker_id',
        :'worker' => :'worker',
        :'start_time' => :'start_time',
        :'end_time' => :'end_time',
        :'comments' => :'comments',
        :'job_shifts' => :'job_shifts',
        :'breaks' => :'breaks',
        :'premiums' => :'premiums',
        :'piece_rate_premiums' => :'piece_rate_premiums',
        :'segments' => :'segments',
        :'time_entry_summary' => :'time_entry_summary',
        :'time_card_id' => :'time_card_id',
        :'time_card' => :'time_card',
        :'tags' => :'tags',
        :'idempotency_key' => :'idempotency_key',
        :'create_extra_hours_run' => :'create_extra_hours_run',
        :'status' => :'status',
        :'pay_period' => :'pay_period',
        :'shift_input_values' => :'shift_input_values'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'created_at' => :'String',
        :'updated_at' => :'String',
        :'worker_id' => :'String',
        :'worker' => :'Worker',
        :'start_time' => :'String',
        :'end_time' => :'String',
        :'comments' => :'Array<TimeEntryComment>',
        :'job_shifts' => :'Array<JobShift>',
        :'breaks' => :'Array<ModelBreak>',
        :'premiums' => :'Array<Premiums>',
        :'piece_rate_premiums' => :'Array<PieceRatePremiums>',
        :'segments' => :'Array<Segments>',
        :'time_entry_summary' => :'TimeEntrySummary',
        :'time_card_id' => :'String',
        :'time_card' => :'TimeCard',
        :'tags' => :'Array<String>',
        :'idempotency_key' => :'String',
        :'create_extra_hours_run' => :'Boolean',
        :'status' => :'String',
        :'pay_period' => :'PayPeriod',
        :'shift_input_values' => :'Array<ShiftInputValue>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `RipplingRb::TimeEntry` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `RipplingRb::TimeEntry`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      else
        self.created_at = nil
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      else
        self.updated_at = nil
      end

      if attributes.key?(:'worker_id')
        self.worker_id = attributes[:'worker_id']
      else
        self.worker_id = nil
      end

      if attributes.key?(:'worker')
        self.worker = attributes[:'worker']
      end

      if attributes.key?(:'start_time')
        self.start_time = attributes[:'start_time']
      end

      if attributes.key?(:'end_time')
        self.end_time = attributes[:'end_time']
      end

      if attributes.key?(:'comments')
        if (value = attributes[:'comments']).is_a?(Array)
          self.comments = value
        end
      end

      if attributes.key?(:'job_shifts')
        if (value = attributes[:'job_shifts']).is_a?(Array)
          self.job_shifts = value
        end
      end

      if attributes.key?(:'breaks')
        if (value = attributes[:'breaks']).is_a?(Array)
          self.breaks = value
        end
      end

      if attributes.key?(:'premiums')
        if (value = attributes[:'premiums']).is_a?(Array)
          self.premiums = value
        end
      end

      if attributes.key?(:'piece_rate_premiums')
        if (value = attributes[:'piece_rate_premiums']).is_a?(Array)
          self.piece_rate_premiums = value
        end
      end

      if attributes.key?(:'segments')
        if (value = attributes[:'segments']).is_a?(Array)
          self.segments = value
        end
      end

      if attributes.key?(:'time_entry_summary')
        self.time_entry_summary = attributes[:'time_entry_summary']
      end

      if attributes.key?(:'time_card_id')
        self.time_card_id = attributes[:'time_card_id']
      end

      if attributes.key?(:'time_card')
        self.time_card = attributes[:'time_card']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'idempotency_key')
        self.idempotency_key = attributes[:'idempotency_key']
      end

      if attributes.key?(:'create_extra_hours_run')
        self.create_extra_hours_run = attributes[:'create_extra_hours_run']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'pay_period')
        self.pay_period = attributes[:'pay_period']
      end

      if attributes.key?(:'shift_input_values')
        if (value = attributes[:'shift_input_values']).is_a?(Array)
          self.shift_input_values = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      if @worker_id.nil?
        invalid_properties.push('invalid value for "worker_id", worker_id cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @id.nil?
      return false if @created_at.nil?
      return false if @updated_at.nil?
      return false if @worker_id.nil?
      status_validator = EnumAttributeValidator.new('String', ["DRAFT", "APPROVED", "PAID", "FINALIZED"])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.nil?
        fail ArgumentError, 'id cannot be nil'
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] created_at Value to be assigned
    def created_at=(created_at)
      if created_at.nil?
        fail ArgumentError, 'created_at cannot be nil'
      end

      @created_at = created_at
    end

    # Custom attribute writer method with validation
    # @param [Object] updated_at Value to be assigned
    def updated_at=(updated_at)
      if updated_at.nil?
        fail ArgumentError, 'updated_at cannot be nil'
      end

      @updated_at = updated_at
    end

    # Custom attribute writer method with validation
    # @param [Object] worker_id Value to be assigned
    def worker_id=(worker_id)
      if worker_id.nil?
        fail ArgumentError, 'worker_id cannot be nil'
      end

      @worker_id = worker_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["DRAFT", "APPROVED", "PAID", "FINALIZED"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          worker_id == o.worker_id &&
          worker == o.worker &&
          start_time == o.start_time &&
          end_time == o.end_time &&
          comments == o.comments &&
          job_shifts == o.job_shifts &&
          breaks == o.breaks &&
          premiums == o.premiums &&
          piece_rate_premiums == o.piece_rate_premiums &&
          segments == o.segments &&
          time_entry_summary == o.time_entry_summary &&
          time_card_id == o.time_card_id &&
          time_card == o.time_card &&
          tags == o.tags &&
          idempotency_key == o.idempotency_key &&
          create_extra_hours_run == o.create_extra_hours_run &&
          status == o.status &&
          pay_period == o.pay_period &&
          shift_input_values == o.shift_input_values
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, created_at, updated_at, worker_id, worker, start_time, end_time, comments, job_shifts, breaks, premiums, piece_rate_premiums, segments, time_entry_summary, time_card_id, time_card, tags, idempotency_key, create_extra_hours_run, status, pay_period, shift_input_values].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = RipplingRb.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
